#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W             &kp E          &kp R                   &kp T                                                          &kp Y        &kp U  &lt 5 I           &kp O              &kp P
&kp A           &kp S             &kp D          &kp F                   &kp G        &mkp LCLK                          &kp COMMA      &kp H        &kp J  &kp K             &kp L              &kp MINUS
&kp Z           &kp X             &kp C          &kp V                   &kp B        &mkp RCLK                          &kp PERIOD     &kp N        &kp M  &kp LEFT_COMMAND  &kp LC(LG(SPACE))  &kp SLASH
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp RIGHT_ALT  &lt_to_layer_0 6 COLON  &lt 2 SPACE  &lt_to_layer_0 3 LEFT_COMMAND      &kp BACKSPACE  &lt 1 ENTER                                              &kp SEMICOLON
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&kp LG(LEFT_ARROW)  &kp LG(DOWN)      &kp LG(UP)  &kp LG(RIGHT_ARROW)   &trans                                                              &kp LG(TAB)  &kp LG(SPACE)  &kp LG(W)  &kp LG(T)  &kp LA(LC(T))
&kp C_VOLUME_DOWN   &kp C_VOLUME_UP   &kp K_MUTE  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LG(LS(NUMBER_4))      &kp LC(K)          &kp LG(C)    &kp LG(V)      &kp LG(Z)  &kp LG(A)  &kp LC(LA(SPACE))
&trans              &kp LC(NUMBER_1)  &kp LG(X)   &kp LG(DOWN_ARROW)    &kp LEFT_SHIFT         &kt LG(LS(NUMBER_6))      &kp LG(BACKSPACE)  &kp DELETE   &mkp LCLK      &trans     &trans     &kp LA(LC(T))
&trans              &trans            &trans      &trans                &kp LG(LA(LEFT))       &kp LG(LA(RIGHT))         &trans             &trans                                            &kp LA(LC(LEFT_ARROW))
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp QUESTION    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&kt LEFT_SHIFT              &trans           &trans           &trans           &trans        &kp LEFT_GUI                 &kp LEFT_SHIFT  &kp LEFT_COMMAND                                                           &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                        &trans   &trans    &kp UP_ARROW    &trans     &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans                 &trans        &trans   &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &kp LC(LA(SPACE))      &trans        &trans   &trans    &trans          &trans     &trans
&trans          &trans                  &trans          &trans                   &trans   &trans                 &kp LEFT_GUI  &kp TAB                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans    &trans     &trans     &trans     &trans                           &trans    &trans     &trans     &trans     &trans
&mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5  &mkp LCLK      &trans  &mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5
&trans    &trans     &trans     &trans     &trans    &mkp RCLK      &trans  &trans    &trans     &trans     &trans     &trans
&trans    &trans     &trans     &trans     &trans    &trans         &trans  &trans                                     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans     &trans      &studio_unlock  &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kt KP_N4  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans     &trans      &trans          &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
